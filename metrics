import torch
import os
import json

import numpy as np

from ultralytics.utils.metrics import box_iou
from ultralytics.utils.metrics import ConfusionMatrix, DetMetrics
from ultralytics.utils.ops import xywh2xyxy

# create confusion matrix object
conf_matrix = ConfusionMatrix(nc=6)

# Load Results
pred_path = "ensemble_YOLOv9c/output"
test_path = "datasets\crystals_2600\labels\\test"

# List all files in the directory
results_folder_path = os.listdir(pred_path)

# Iterate through each file in the directory
for file_name in results_folder_path:

    file_name = os.path.splitext(file_name)[0]

    # PREDICTIONS
    file_path_json = os.path.join(pred_path, file_name + ".json")
    with open(file_path_json, "r") as f:
        y_pred = json.load(f)
    
    # GROUND TRUTH
    y_true = []
    file_path_txt = os.path.join(test_path, file_name + ".txt")
    with open(file_path_txt, "r") as f:

        for line in f:
            line_data = [float(value) for value in line.split()]
            y_true.append(line_data)

    y_pred_tensor = torch.tensor(y_pred)
    y_true_tensor = torch.tensor(y_true)

    if y_pred_tensor.size(0) != 0:
        boxes_pred = y_pred_tensor[:, [1, 3, 5, 7]]
        boxes_pred = xywh2xyxy(boxes_pred)
        conf_class = y_pred_tensor[:, [9, 0]]
        detections = torch.cat((boxes_pred, conf_class), dim=1)
    else:
        detections = y_pred_tensor

    if y_true_tensor.size(0) != 0:
        gt_bboxes = xywh2xyxy(y_true_tensor[:, 1:])
        gt_cls = y_true_tensor[:, :1]
    else:
        gt_bboxes = y_true_tensor
        gt_cls = y_true_tensor

    conf_matrix.process_batch(detections, gt_bboxes, gt_cls)


# Access confusion matrix
matrix = conf_matrix.matrix

# Calculate TP and FP
tp, fp = conf_matrix.tp_fp()

# Plot confusion matrix
conf_matrix.plot(normalize=True)
conf_matrix.plot(normalize=False)


# ################

# Assuming you have your confusion matrix stored in a variable called 'confusion_matrix'

# Create an instance of the Metric class
evaluation_metric = DetMetrics()

# evaluation_metric.process(tp, detections[:,[5]], detections[:,[4]], gt_cls)